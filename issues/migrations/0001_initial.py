# Generated by Django 5.1.3 on 2025-08-11 17:19

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='IssuePost',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=150)),
                ('description', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='issue_posts/')),
                ('department', models.CharField(choices=[('public_works', 'Public Works Department'), ('water_supply', 'Water Supply Department'), ('waste_management', 'Waste Management Department'), ('electricity', 'Electricity Department')], help_text='Select the relevant department for this issue.', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('resolved', 'Resolved')], default='pending', max_length=20)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('comments_count', models.PositiveIntegerField(default=0)),
                ('reported_latitude', models.FloatField(blank=True, null=True)),
                ('reported_longitude', models.FloatField(blank=True, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_method', models.CharField(blank=True, max_length=50, null=True)),
                ('verification_score', models.FloatField(blank=True, null=True)),
                ('verification_details', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issue_posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Issue Post',
                'verbose_name_plural': 'Issue Posts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(max_length=300)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='issues.issuepost')),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='issues.issuepost')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Like',
                'verbose_name_plural': 'Likes',
            },
        ),
        migrations.CreateModel(
            name='SavedPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('saved_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='issues.issuepost')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_posts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='A short, descriptive title for your task.', max_length=100)),
                ('description', models.TextField(help_text='Provide details about the task you completed, including location and impact.')),
                ('task_type', models.CharField(choices=[('plastic_bottles', 'Donate 100 Plastic Bottles (Recycling)'), ('public_awareness', 'Conduct a Public Awareness Campaign'), ('tree_planting', 'Participate in a Tree Planting Drive'), ('community_cleanup', 'Organize/Join a Community Cleanup Event'), ('e_waste_collection', 'Facilitate E-Waste Collection'), ('water_conservation', 'Implement Water Conservation Initiative'), ('energy_saving', 'Promote Energy Saving Practices'), ('composting', 'Start/Maintain a Composting Project'), ('other', 'Other Approved Civic Task')], max_length=50)),
                ('proof_image', models.ImageField(blank=True, null=True, upload_to='tasks/')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('admin_feedback', models.TextField(blank=True, null=True)),
                ('initial_eco_coins', models.PositiveIntegerField(default=0)),
                ('verified_eco_coins', models.PositiveIntegerField(default=0)),
                ('total_eco_coins_awarded', models.PositiveIntegerField(default=0)),
                ('reported_latitude', models.FloatField(blank=True, null=True)),
                ('reported_longitude', models.FloatField(blank=True, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_method', models.CharField(blank=True, max_length=50, null=True)),
                ('verification_score', models.FloatField(blank=True, null=True)),
                ('verification_details', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='issuepost',
            index=models.Index(fields=['-created_at'], name='issues_issu_created_f5e588_idx'),
        ),
        migrations.AddIndex(
            model_name='issuepost',
            index=models.Index(fields=['status'], name='issues_issu_status_00e695_idx'),
        ),
        migrations.AddIndex(
            model_name='issuepost',
            index=models.Index(fields=['department'], name='issues_issu_departm_2765dd_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['-timestamp'], name='issues_comm_timesta_da80e0_idx'),
        ),
        migrations.AddIndex(
            model_name='like',
            index=models.Index(fields=['-timestamp'], name='issues_like_timesta_f503a8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='like',
            unique_together={('user', 'post')},
        ),
        migrations.AlterUniqueTogether(
            name='savedpost',
            unique_together={('user', 'post')},
        ),
    ]
